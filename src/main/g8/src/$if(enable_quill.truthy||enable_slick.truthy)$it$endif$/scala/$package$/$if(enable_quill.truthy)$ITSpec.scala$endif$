package $package$

import javax.sql.DataSource

import com.typesafe.config.{ Config, ConfigFactory }
import io.getquill.jdbczio.Quill
import io.getquill.Literal
import zio._
import zio.test.ZIOSpecDefault
import zio.logging.backend.SLF4J

import $package$.domain.ItemRepository
import $package$.infrastructure.Postgres
import $package$.infrastructure.Postgres.SchemaAwarePostgresContainer
import $package$.infrastructure.flyway.FlywayProvider
import $package$.infrastructure.quill.QuillItemRepository

import scala.jdk.CollectionConverters.MapHasAsJava

abstract class ITSpec(schema: Option[String]) extends ZIOSpecDefault {

  val itLayers: ZLayer[Scope, Throwable, FlywayProvider with ItemRepository] = {

    val logging: ULayer[Unit] = ZLayer.make[Unit](
      Runtime.removeDefaultLoggers,
      SLF4J.slf4j
    )

    val postgres: URLayer[Scope, SchemaAwarePostgresContainer] = Postgres.postgres(schema)

    val config: URLayer[SchemaAwarePostgresContainer, Config] = ZLayer {
      for {
        container <- ZIO.service[SchemaAwarePostgresContainer]
      } yield ConfigFactory.parseMap(
        Map[String, Any](
          "dataSource.jdbcUrl"         -> container.jdbcUrl,
          "dataSource.username"        -> container.username,
          "dataSource.password"        -> container.password,
          "dataSource.driverClassName" -> "org.postgresql.Driver"
        ).asJava
      )
    }

    val quillDataSourceLayer: RLayer[SchemaAwarePostgresContainer, DataSource] = config.flatMap { rawConfig =>
      val dbConfig: Config = rawConfig.get.getConfig("dataSource")

      Quill.DataSource.fromConfig(
        ConfigFactory.parseMap(
          Map(
            "dataSourceClassName" -> "org.postgresql.ds.PGSimpleDataSource",
            "dataSource.url"      -> dbConfig.getString("jdbcUrl"),
            "dataSource.user"     -> dbConfig.getString("username"),
            "dataSource.password" -> dbConfig.getString("password")
          ).asJava
        )
      )
    }

    val quillPostgresLayer: RLayer[DataSource, Quill.Postgres[Literal]] = Quill.Postgres.fromNamingStrategy(Literal)

    val quillLayer: RLayer[SchemaAwarePostgresContainer, Quill.Postgres[Literal]] =
      (quillDataSourceLayer >>> quillPostgresLayer).orDie

    val itemRepositoryLayer: RLayer[SchemaAwarePostgresContainer, ItemRepository] =
      quillLayer >>> QuillItemRepository.live

    val flywayLayer: RLayer[SchemaAwarePostgresContainer, FlywayProvider] = quillDataSourceLayer >>> FlywayProvider.live

    ZLayer.makeSome[Scope, FlywayProvider with ItemRepository](
      logging,
      postgres,
      itemRepositoryLayer,
      flywayLayer
    )
  }

}
