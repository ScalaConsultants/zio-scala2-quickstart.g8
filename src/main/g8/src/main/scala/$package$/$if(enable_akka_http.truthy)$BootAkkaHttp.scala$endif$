package $package$

import akka.actor.ActorSystem
import akka.http.interop._
import akka.http.scaladsl.Http
import akka.http.scaladsl.server.Route

import zio._

import $package$.api._
import $package$.config.Configuration.ApiConfig
import $package$.infrastructure.flyway.FlywayProvider

object BootAkkaHttp extends ZIOAppDefault {

  private val startHttpServer: RIO[Scope with HttpServer, Http.ServerBinding] =
    HttpServer.start.tap(_ => Console.printLine("Server online."))

  private val migrateDbSchema: RIO[FlywayProvider, Unit] =
    FlywayProvider.flyway
      .flatMap(_.migrate)
      .retry(Schedule.exponential(200.millis))
      .flatMap(res => Console.printLine(s"Flyway migration completed with: \$res"))

  private val program: RIO[Scope with FlywayProvider with HttpServer, Nothing] =
    startHttpServer *>
    migrateDbSchema *>
    ZIO.never

  override val run = program.provide(
    Scope.default,
    HttpServerConfig.live,
    AkkaActorSystem.live,
    ApiAkkaHttp.live,
    ApiRoutes.live,
    HttpServer.live,
    Layers.itemRepository,
    Layers.healthCheckService,
    Layers.flyway,
    Layers.logger,
    ApiConfig.layer,
  )

  object AkkaActorSystem {
    val live: RLayer[Scope, ActorSystem] = {
      val effect = ZIO.acquireRelease(ZIO.attempt(ActorSystem("$name$-system")))(actorSystem =>
        ZIO.fromFuture(_ => actorSystem.terminate()).either
      )

      ZLayer.fromZIO(effect)
    }
  }

  object ApiRoutes {
    val live: URLayer[ApiAkkaHttp, Route] = ZLayer(ZIO.service[ApiAkkaHttp].map(_.routes))
  }

  object HttpServerConfig {
    val live =
      ZLayer
        .service[ApiConfig]
        .flatMap { cfg =>
          ZLayer.succeed(HttpServer.Config(cfg.get.host, cfg.get.port))
        }
  }

}
