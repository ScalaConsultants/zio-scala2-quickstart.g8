package $package$

import zio._
import zhttp.service.Server

import $package$.api.{ HealthCheckApp, ItemApp }
import $package$.config.AppConfig
import $package$.infrastructure.flyway.FlywayProvider

object BootZioHttp extends ZIOAppDefault {

  val routes = ItemApp.app ++ HealthCheckApp.app
  
  val startHttpServer = 
    ZIO.service[AppConfig.ApiConfig].flatMap { cfg => 
      Server.start(cfg.port, routes)
    }

  val migrateDbSchema: RIO[FlywayProvider, Unit] =
    FlywayProvider.flyway
      .flatMap(_.migrate)
      .retry(Schedule.exponential(200.millis))
      .flatMap(res => Console.printLine(s"Flyway migration completed with: \$res"))

  val program =
    migrateDbSchema *>
    startHttpServer

  override val run = 
    program.provide(
      AppConfig.Api.live,
      Layers.itemRepository,
      Layers.healthCheckService,
      Layers.flyway,
      Layers.logger
    )

}
